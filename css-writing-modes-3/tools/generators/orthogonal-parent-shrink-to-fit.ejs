<!DOCTYPE html>
<%
var testlist = [];
for (var outer of [
    ["inline-block", '<div class="inline-block">', '</div><span class="next">YY</span>'],
    ["float", '<div class="float">', '</div><span class="next">YY</span>'],
    ["table-cell", '<table><tr><td>', '</td><td class="next">YY</td></tr></table>']]) {
    for (var middle of [
        null,
        ["inline-block", '<div class="inline-block">', '</div>']]) {
        for (var target of [
            ["block", '<div class="target">XX</div>'],
            ["inline", '<span class="target">XX</span>'],
            ["block with borders", '<div class="target border">XXX</div>'],
            ["inline with borders", '<span class="target border">XXX</span>']]) {
            var title = target[0];
            var html = target[1];
            if (middle) {
                title += " in " + middle[0];
                html = middle[1] + html + middle[2];
            }
            title = "Shrink to fit " + outer[0] + " with a child of orthogonal " + title;
            html = outer[1] + html + outer[2];
            testlist.push([title, html]);
        }
    }
}
var min, limit, title;
if (index < 0) {
    min = 0;
    limit = testlist.length;
    title = "Shrink-to-fit with orthogonal children"
} else {
    min = index;
    limit = index + 1;
    title = testlist[index][0];
}
%><title>CSS Writing Modes Test: <%= title %></title>
<link rel="help" href="http://www.w3.org/TR/css-writing-modes-3/#orthogonal-flows">
<meta name="assert" content="<%= title %>">
<meta name="flags" content="ahem<%= index < 0 ? ' combo' : ''%>">
<link rel="author" title="Koji Ishii" href="mailto:kojiishi@gmail.com">
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<link rel="stylesheet" href="/resources/testharness.css">
<style>
.test {
    border:thin solid;
    font:20px/1 Ahem;
}
.target {
    color:blue;
    writing-mode:vertical-rl;
}
.border {
    border-right:blue solid .5em;
}
.next {
    color:orange;
}
.inline-block {
    display:inline-block;
}
.float {
    float:left;
}
h3 {
    clear:both;
}
h3.fail {
    color:red;
}
table {
    border-spacing:0px;
}
td {
    padding:0px;
}
</style>
<div id="container">
<p>Test passes if the <b>left</b> edge of the orange box <b>touches</b> the <b>right</b> edge of the blue box.
    There should be no spaces nor overlaps.
<p>The blue box must be <b>tall</b>, the height should be as twice as the width.
<p>If script is enabled, there should be one or more PASS and no FAIL.
<% for (var i = min; i < limit; ++i) {
    var test = testlist[i];
%><h3><%= (i + 1) + ": " + test[0] %></h3>
<div class="test">
    <%- test[1] %>
</div>
<% } %></div>
<script>
if (window.location.search == "?wait") {
    console.log("Sleeping 5 secs for debug");
    setup({explicit_done:true});
    window.setTimeout(run, 5000);
} else {
    run();
}

function run() {
    Array.prototype.forEach.call(document.querySelectorAll(".test"), function (node) {
        var title = node.previousElementSibling.innerText;
        test(function () {
            try {
                var targetNode = node.querySelector(".target");
                var targetBounds = targetNode.getBoundingClientRect();
                assert_approx_equals(targetBounds.height, targetBounds.width * 2, .01, "writing-mode is vertical")
                var nextNode = node.querySelector(".next");
                var nextBounds = nextNode.getBoundingClientRect();
                assert_equals(nextBounds.left - targetBounds.right, 0, "the left edge of the orange box touches the right edge of the blue box");
            } catch (e) {
                node.previousElementSibling.classList.add("fail");
                throw e;
            }
        }, title);
    });
    if (window.testRunner)
        container.style.display = "none";
    done();
}
</script>
