<!DOCTYPE html>
<title>IDBCursor.continue() - object store</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
<script src="support.js"></script>

<script>
    var records = [ { pKey: "primaryKey_0" },
                    { pKey: "primaryKey_1" },
                    { pKey: "primaryKey_2" } ];


    function cursor_objstore(func, desc, opts) {
        var db,
          opts = (opts ? opts : {}),
          t = async_test(document.title + " - " + desc);

        var open_rq = createdb(t);
        open_rq.onupgradeneeded = function(e) {
            db = e.target.result;
            var objStore = db.createObjectStore("test", {keyPath:"pKey"});

            for (var i = 0; i < records.length; i++)
                objStore.add(records[i]);
        };

        open_rq.onsuccess = function(e) {
            db = e.target.result;
            var cursor_rq = db.transaction("test")
                              .objectStore("test")
                              .openCursor(opts.keyrange, opts.direction);

            cursor_rq.onsuccess = t.step_func(func)
        }
    }


    // Tests start

    cursor_objstore(function(e) {
        var cursor = e.target.result;

        if (!this.count)
            this.count = 0;

        if (!cursor) {
            assert_equals(this.count, records.length, "cursor run count");
            this.done();
        }

        assert_equals(cursor.value.pKey, records[this.count].pKey, "primary key");
        assert_equals(cursor.value.iKey, records[this.count].iKey, "index key");

        cursor.continue();
        this.count++;
    }, "iterate to the next record");


    cursor_objstore(function(e) {
        var cursor = e.target.result;

        assert_true(cursor != null, "cursor exist");
        assert_throws("DataError",
            function() { cursor.continue(document); });

        this.done();
    }, "attempt to pass a key parameter is not a valid key");


    cursor_objstore(function(e) {
        var cursor = e.target.result;

        assert_true(cursor != null, "cursor exist");
        assert_equals(records[0].pKey, cursor.value.pKey, "expect first record");
        assert_throws("DataError",
            function() { cursor.continue(records[0].pKey); });

        this.done();
    }, "attempt to iterate to the previous record when the direction is set for the next record");


    cursor_objstore(function(e) {
            var cursor = e.target.result;

            if (!this.count)
                this.count = 0;

            assert_true(cursor != null, "cursor exist");

            switch(this.count) {
            case 0:
                assert_equals(cursor.value.pKey, records[2].pKey, "first cursor pkey");
                cursor.continue(records[1].pKey);
                break;

            case 1:
                assert_equals(cursor.value.pKey, records[1].pKey, "second cursor pkey");
                assert_throws("DataError",
                    function() { cursor.continue(records[2].pkey); });
                this.done();
                break;

            default:
                assert_unreached("Unexpected count value: " + this.count);
            }

            this.count++;
        },
        "attempt to iterate to the next record when the direction is set for the previous record",
        { keyrange: IDBKeyRange.lowerBound(records[0].pKey), direction: IDBCursor.PREV }
    );
</script>

<div id="log"> </div>
