// Test importKey and exportKey for non-PKC algorithms. Only "happy paths" are
// currently tested - those where the operation should succeed.

function run_test() {
    var subtle = crypto.subtle;

    var sizes = [1024, 2048, 4096];

    var hashes = ["SHA-1", "SHA-256", "SHA-384", "SHA-512"];

    var keyData = {
        1024: {
            "spki": new Uint8Array([48, 129, 159, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 129, 141, 0, 48, 129, 137, 2, 129, 129, 0, 232, 178, 76, 163, 230, 16, 216, 205, 132, 145, 237, 33, 10, 44, 9, 179, 2, 149, 129, 246, 239, 233, 218, 189, 95, 1, 53, 38, 24, 237, 91, 67, 72, 175, 177, 84, 158, 138, 166, 132, 144, 229, 130, 44, 55, 37, 181, 73, 102, 13, 190, 77, 14, 113, 32, 61, 180, 48, 102, 14, 250, 252, 59, 136, 26, 62, 110, 147, 123, 73, 71, 220, 32, 20, 211, 8, 214, 193, 199, 80, 167, 182, 124, 172, 143, 173, 2, 123, 165, 148, 152, 15, 244, 50, 211, 217, 92, 120, 155, 152, 5, 141, 189, 11, 184, 221, 74, 67, 56, 114, 156, 179, 199, 242, 169, 61, 45, 118, 113, 92, 36, 189, 253, 77, 254, 198, 149, 25, 2, 3, 1, 0, 1]),
            "pkcs8": new Uint8Array([48, 130, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 2, 96, 48, 130, 2, 92, 2, 1, 0, 2, 129, 129, 0, 232, 178, 76, 163, 230, 16, 216, 205, 132, 145, 237, 33, 10, 44, 9, 179, 2, 149, 129, 246, 239, 233, 218, 189, 95, 1, 53, 38, 24, 237, 91, 67, 72, 175, 177, 84, 158, 138, 166, 132, 144, 229, 130, 44, 55, 37, 181, 73, 102, 13, 190, 77, 14, 113, 32, 61, 180, 48, 102, 14, 250, 252, 59, 136, 26, 62, 110, 147, 123, 73, 71, 220, 32, 20, 211, 8, 214, 193, 199, 80, 167, 182, 124, 172, 143, 173, 2, 123, 165, 148, 152, 15, 244, 50, 211, 217, 92, 120, 155, 152, 5, 141, 189, 11, 184, 221, 74, 67, 56, 114, 156, 179, 199, 242, 169, 61, 45, 118, 113, 92, 36, 189, 253, 77, 254, 198, 149, 25, 2, 3, 1, 0, 1, 2, 129, 129, 0, 211, 127, 211, 215, 24, 178, 113, 76, 3, 85, 219, 81, 47, 124, 173, 104, 46, 78, 19, 173, 141, 140, 97, 139, 196, 1, 69, 252, 149, 165, 143, 80, 205, 141, 27, 65, 205, 68, 58, 107, 189, 131, 77, 88, 192, 219, 30, 54, 83, 114, 228, 104, 7, 91, 93, 49, 152, 72, 113, 74, 230, 103, 65, 247, 12, 24, 18, 126, 172, 88, 218, 122, 109, 157, 250, 254, 231, 193, 187, 73, 182, 191, 138, 226, 43, 54, 86, 114, 37, 9, 143, 210, 110, 236, 17, 29, 219, 167, 27, 5, 53, 221, 239, 5, 214, 227, 90, 194, 169, 61, 4, 152, 33, 12, 144, 114, 41, 247, 96, 34, 164, 76, 82, 204, 101, 230, 137, 93, 2, 65, 0, 248, 210, 17, 155, 142, 158, 18, 188, 128, 76, 127, 169, 221, 5, 247, 8, 150, 242, 118, 228, 50, 54, 51, 189, 163, 63, 175, 210, 223, 237, 155, 140, 210, 251, 163, 147, 145, 25, 239, 39, 216, 29, 246, 119, 72, 178, 82, 54, 127, 202, 102, 220, 209, 73, 73, 17, 46, 112, 246, 146, 51, 35, 48, 131, 2, 65, 0, 239, 105, 32, 247, 31, 26, 166, 197, 44, 187, 89, 44, 97, 70, 99, 74, 86, 188, 51, 207, 228, 235, 168, 161, 242, 141, 69, 153, 248, 106, 59, 60, 15, 140, 217, 163, 217, 8, 224, 223, 189, 88, 182, 141, 144, 116, 170, 87, 6, 130, 241, 73, 246, 139, 251, 35, 18, 206, 187, 245, 155, 242, 121, 51, 2, 64, 69, 117, 167, 18, 172, 202, 117, 226, 135, 82, 83, 165, 32, 157, 68, 171, 242, 47, 119, 127, 22, 129, 73, 10, 92, 99, 47, 251, 7, 37, 246, 113, 102, 136, 118, 206, 128, 8, 36, 90, 20, 27, 177, 44, 245, 111, 74, 66, 10, 132, 127, 24, 143, 152, 12, 188, 174, 33, 60, 195, 237, 96, 154, 111, 2, 64, 6, 223, 20, 148, 35, 47, 103, 163, 247, 33, 181, 112, 129, 166, 60, 137, 80, 173, 252, 42, 182, 94, 81, 43, 188, 195, 115, 64, 245, 17, 79, 123, 236, 210, 85, 24, 207, 204, 226, 111, 105, 134, 215, 78, 126, 219, 234, 91, 175, 19, 41, 11, 191, 104, 203, 31, 121, 149, 183, 109, 88, 57, 128, 99, 2, 64, 75, 42, 82, 62, 172, 138, 163, 213, 173, 189, 134, 155, 40, 255, 214, 176, 214, 60, 133, 218, 17, 18, 169, 14, 86, 100, 111, 35, 180, 204, 65, 197, 47, 104, 15, 25, 16, 156, 73, 39, 135, 140, 144, 27, 59, 229, 209, 70, 57, 93, 151, 222, 35, 128, 137, 198, 41, 62, 183, 140, 122, 43, 125, 175]),
            "jwk": {
                kty: "RSA",
                n: "163405026595673273170987207948543477779744368930822038516324196686768708157067218120624389840718591642514702804702900714112084094976841822971760193709084301778117071192856078396469022907158745813961697062773622524858441066227822406025038728429413186331359195565495095243554893013810877011424629706330852463897",
                e: "65537",
                d: "148519877614545521811742908828156451178815521371168597407600033935650878721821611941212338520867362686263840303458163889673230591657926619603565000818911806778530257569644893039539215897800076119383516250602905136116544407718903823265782845505907294843026742772190846534565101518476153766034564679880061389149"
            }
        },
        2048: {
            "spki": new Uint8Array([48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 188, 209, 218, 52, 11, 182, 90, 73, 11, 85, 2, 252, 249, 61, 37, 170, 239, 198, 150, 229, 67, 131, 89, 165, 249, 72, 142, 217, 28, 3, 48, 153, 90, 148, 158, 215, 193, 159, 112, 145, 29, 204, 166, 11, 67, 254, 102, 144, 226, 16, 192, 6, 203, 119, 63, 131, 17, 85, 131, 10, 148, 179, 2, 70, 66, 205, 86, 210, 201, 111, 113, 57, 27, 11, 76, 87, 153, 22, 222, 131, 40, 1, 116, 107, 242, 13, 121, 166, 213, 194, 47, 86, 191, 167, 35, 220, 183, 28, 254, 208, 191, 125, 255, 226, 188, 42, 18, 168, 33, 167, 179, 238, 183, 236, 212, 218, 191, 236, 237, 19, 225, 226, 105, 111, 249, 53, 154, 17, 167, 141, 35, 185, 182, 148, 96, 139, 44, 179, 11, 6, 11, 141, 255, 141, 218, 231, 246, 167, 132, 33, 198, 69, 220, 214, 208, 239, 253, 29, 212, 217, 250, 115, 239, 97, 238, 34, 151, 154, 148, 66, 14, 240, 218, 63, 104, 108, 10, 196, 53, 160, 136, 81, 58, 29, 220, 71, 92, 251, 14, 151, 109, 180, 132, 199, 213, 124, 101, 234, 3, 86, 4, 60, 146, 129, 251, 226, 43, 49, 97, 172, 119, 111, 146, 50, 54, 56, 151, 188, 17, 17, 227, 15, 25, 221, 17, 113, 10, 204, 128, 49, 71, 92, 84, 191, 1, 139, 15, 241, 9, 189, 177, 190, 143, 171, 250, 179, 244, 71, 153, 117, 232, 100, 203, 68, 131, 47, 2, 3, 1, 0, 1]),
            "pkcs8": new Uint8Array([48, 130, 4, 188, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 4, 166, 48, 130, 4, 162, 2, 1, 0, 2, 130, 1, 1, 0, 188, 209, 218, 52, 11, 182, 90, 73, 11, 85, 2, 252, 249, 61, 37, 170, 239, 198, 150, 229, 67, 131, 89, 165, 249, 72, 142, 217, 28, 3, 48, 153, 90, 148, 158, 215, 193, 159, 112, 145, 29, 204, 166, 11, 67, 254, 102, 144, 226, 16, 192, 6, 203, 119, 63, 131, 17, 85, 131, 10, 148, 179, 2, 70, 66, 205, 86, 210, 201, 111, 113, 57, 27, 11, 76, 87, 153, 22, 222, 131, 40, 1, 116, 107, 242, 13, 121, 166, 213, 194, 47, 86, 191, 167, 35, 220, 183, 28, 254, 208, 191, 125, 255, 226, 188, 42, 18, 168, 33, 167, 179, 238, 183, 236, 212, 218, 191, 236, 237, 19, 225, 226, 105, 111, 249, 53, 154, 17, 167, 141, 35, 185, 182, 148, 96, 139, 44, 179, 11, 6, 11, 141, 255, 141, 218, 231, 246, 167, 132, 33, 198, 69, 220, 214, 208, 239, 253, 29, 212, 217, 250, 115, 239, 97, 238, 34, 151, 154, 148, 66, 14, 240, 218, 63, 104, 108, 10, 196, 53, 160, 136, 81, 58, 29, 220, 71, 92, 251, 14, 151, 109, 180, 132, 199, 213, 124, 101, 234, 3, 86, 4, 60, 146, 129, 251, 226, 43, 49, 97, 172, 119, 111, 146, 50, 54, 56, 151, 188, 17, 17, 227, 15, 25, 221, 17, 113, 10, 204, 128, 49, 71, 92, 84, 191, 1, 139, 15, 241, 9, 189, 177, 190, 143, 171, 250, 179, 244, 71, 153, 117, 232, 100, 203, 68, 131, 47, 2, 3, 1, 0, 1, 2, 130, 1, 0, 101, 248, 170, 239, 202, 151, 123, 96, 209, 70, 226, 235, 61, 171, 1, 41, 180, 126, 58, 69, 172, 85, 70, 87, 245, 45, 115, 63, 218, 249, 250, 8, 7, 188, 21, 160, 141, 135, 142, 162, 64, 70, 162, 49, 153, 81, 205, 144, 87, 22, 22, 174, 84, 185, 156, 202, 42, 213, 84, 132, 165, 83, 155, 89, 216, 127, 206, 112, 221, 170, 90, 170, 45, 105, 199, 155, 211, 40, 95, 152, 211, 69, 29, 219, 162, 8, 22, 247, 187, 159, 56, 51, 144, 35, 50, 161, 227, 30, 60, 154, 253, 159, 141, 78, 164, 177, 208, 11, 142, 201, 99, 201, 250, 248, 98, 231, 148, 24, 222, 220, 10, 244, 92, 94, 197, 102, 102, 66, 78, 181, 197, 81, 101, 142, 218, 252, 251, 134, 9, 48, 171, 45, 74, 35, 211, 27, 158, 25, 164, 159, 94, 28, 224, 200, 192, 55, 53, 248, 223, 243, 11, 218, 63, 127, 207, 242, 198, 11, 23, 160, 4, 27, 119, 114, 218, 211, 173, 197, 166, 93, 208, 127, 180, 183, 223, 30, 106, 143, 221, 85, 19, 153, 74, 135, 200, 191, 92, 144, 14, 10, 54, 246, 207, 191, 248, 25, 107, 216, 247, 97, 164, 149, 198, 165, 203, 201, 90, 214, 228, 72, 73, 29, 62, 162, 145, 83, 239, 83, 141, 193, 82, 69, 223, 95, 49, 133, 188, 237, 160, 177, 95, 2, 131, 47, 122, 22, 243, 129, 23, 227, 149, 222, 195, 91, 253, 217, 2, 129, 129, 0, 232, 90, 138, 86, 116, 141, 57, 18, 194, 134, 44, 26, 98, 32, 48, 236, 120, 26, 175, 75, 10, 43, 175, 251, 9, 65, 218, 211, 85, 199, 208, 217, 91, 84, 38, 65, 184, 71, 109, 110, 94, 233, 161, 78, 46, 109, 156, 54, 134, 235, 90, 0, 0, 22, 110, 7, 254, 41, 252, 139, 43, 243, 65, 168, 221, 251, 43, 173, 65, 84, 61, 227, 166, 19, 155, 29, 144, 192, 140, 27, 56, 177, 161, 215, 73, 61, 42, 200, 99, 199, 200, 148, 90, 150, 211, 222, 255, 103, 175, 59, 118, 147, 145, 206, 18, 30, 227, 208, 112, 54, 133, 103, 92, 141, 91, 197, 165, 15, 217, 97, 225, 250, 193, 44, 142, 149, 125, 93, 2, 129, 129, 0, 208, 9, 33, 188, 178, 26, 62, 219, 38, 80, 130, 155, 102, 171, 2, 214, 127, 31, 149, 20, 35, 247, 157, 123, 218, 92, 168, 191, 79, 62, 108, 3, 184, 0, 248, 97, 7, 167, 125, 227, 162, 88, 211, 248, 254, 107, 57, 58, 174, 173, 208, 27, 210, 30, 115, 1, 137, 98, 110, 225, 36, 55, 123, 49, 191, 72, 105, 112, 230, 168, 228, 34, 124, 91, 159, 34, 205, 25, 181, 118, 126, 227, 202, 64, 25, 4, 255, 104, 154, 139, 217, 234, 202, 254, 233, 92, 35, 4, 35, 77, 224, 192, 7, 168, 40, 62, 248, 52, 79, 80, 223, 156, 128, 192, 38, 1, 77, 254, 26, 18, 139, 96, 74, 148, 98, 122, 109, 251, 2, 129, 128, 67, 33, 189, 172, 98, 250, 86, 142, 20, 3, 222, 4, 53, 107, 165, 150, 252, 208, 128, 235, 6, 98, 62, 243, 33, 230, 148, 9, 209, 83, 237, 4, 143, 189, 141, 92, 25, 153, 17, 133, 253, 8, 53, 97, 184, 74, 85, 2, 240, 18, 89, 171, 124, 90, 254, 169, 114, 134, 192, 255, 152, 208, 44, 157, 84, 157, 120, 46, 19, 156, 250, 80, 166, 176, 45, 117, 234, 87, 167, 99, 74, 11, 16, 126, 122, 27, 161, 27, 202, 176, 115, 68, 97, 180, 8, 60, 250, 192, 3, 66, 3, 237, 121, 7, 247, 246, 82, 205, 235, 77, 229, 87, 74, 199, 80, 199, 150, 252, 48, 75, 118, 150, 19, 112, 3, 54, 47, 197, 2, 129, 128, 5, 248, 141, 32, 86, 88, 76, 127, 139, 188, 249, 210, 174, 2, 176, 133, 41, 134, 229, 135, 123, 116, 202, 239, 88, 24, 26, 187, 202, 241, 118, 182, 48, 156, 206, 132, 50, 109, 11, 62, 242, 84, 236, 88, 148, 44, 205, 170, 178, 130, 200, 155, 83, 207, 141, 235, 120, 94, 251, 225, 184, 97, 99, 70, 205, 63, 173, 207, 16, 191, 190, 52, 131, 47, 58, 5, 12, 175, 245, 54, 94, 115, 249, 69, 23, 178, 190, 5, 233, 145, 164, 2, 138, 43, 0, 213, 165, 39, 164, 63, 194, 248, 159, 255, 162, 144, 20, 29, 164, 61, 36, 253, 223, 240, 35, 231, 27, 174, 244, 94, 157, 227, 120, 160, 131, 167, 17, 235, 2, 129, 128, 41, 222, 205, 237, 5, 86, 174, 79, 212, 129, 25, 65, 19, 171, 125, 87, 43, 97, 45, 105, 227, 81, 182, 53, 59, 168, 63, 73, 66, 39, 133, 158, 139, 51, 236, 217, 124, 251, 108, 65, 114, 70, 108, 156, 185, 149, 80, 135, 214, 148, 131, 18, 84, 213, 82, 191, 33, 227, 148, 235, 230, 82, 210, 246, 188, 69, 57, 95, 20, 103, 28, 190, 101, 66, 124, 209, 164, 85, 244, 89, 18, 84, 42, 68, 119, 177, 222, 155, 89, 133, 86, 125, 159, 196, 13, 11, 107, 88, 150, 95, 136, 47, 186, 219, 48, 193, 219, 180, 61, 59, 221, 125, 187, 196, 21, 54, 201, 96, 187, 250, 255, 68, 215, 80, 75, 15, 185, 146]),
            "jwk": {
                kty: "RSA",
                n: "23836283387514636684868231453791539369829211236585460922905895045331421571395790341235758522500290088977520687021816941097226105773012956786893443527590704259258481959901292206584975463629570198903271329082808286648547653794579827985888070483635390617302007476900322978659212311361992997590348564524673436349313811117398791983614726169448371087261653092109939787434534270662118665277882164716966498441960133690410497364164567467709854409402791141572822083515281214478053886841973288233099179274667786510942305267318981204453029883958361911085670681047170302302776238294160159347735785577032289869313601605605787992879",
                e: "65537",
                d: "12872691425214848653242310692342401283494289840799383835763131411865282263094301044407849022488865329801202216698401925572640242330656691327929561114668321648045156964871544853558478974994909410711254438717485293641027924847819763674024390476025869052873490556936282270834574382959778722915531787299109921612223909606305922237339549560100709713258137758774955655088427986410333233709879581140632871605431351413189905131645182458372546738306908995541461578281985448561549241915903925658381873770004365272303836651695219786963894943690048309115626796518052935987335006038552854862300380048880122607037345275910494617049"
            }
        },
        4096: {
            "spki": new Uint8Array([48, 130, 2, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 2, 15, 0, 48, 130, 2, 10, 2, 130, 2, 1, 0, 189, 172, 126, 45, 110, 212, 151, 116, 205, 142, 202, 154, 100, 42, 228, 84, 155, 198, 40, 102, 164, 171, 252, 118, 80, 116, 229, 224, 41, 250, 94, 141, 130, 50, 219, 55, 76, 19, 12, 40, 242, 43, 91, 56, 38, 58, 31, 70, 114, 199, 129, 108, 248, 81, 169, 118, 132, 191, 228, 191, 8, 38, 44, 78, 246, 111, 141, 178, 245, 67, 57, 198, 253, 46, 255, 25, 246, 244, 172, 73, 50, 209, 95, 207, 182, 113, 180, 80, 154, 213, 182, 120, 51, 253, 1, 234, 88, 119, 103, 163, 104, 43, 124, 133, 99, 136, 95, 201, 174, 234, 212, 195, 195, 142, 250, 135, 144, 89, 218, 216, 88, 65, 53, 220, 203, 104, 155, 83, 48, 106, 29, 71, 25, 135, 221, 210, 92, 127, 153, 71, 63, 6, 161, 213, 197, 105, 173, 127, 0, 76, 29, 226, 229, 31, 178, 55, 206, 86, 204, 135, 67, 4, 144, 62, 239, 118, 112, 60, 11, 59, 117, 46, 159, 64, 176, 64, 175, 203, 242, 10, 119, 1, 19, 108, 36, 49, 147, 7, 243, 156, 8, 224, 20, 229, 51, 187, 196, 213, 119, 8, 16, 51, 216, 104, 245, 28, 225, 136, 225, 12, 117, 12, 0, 201, 111, 20, 153, 120, 31, 213, 47, 120, 112, 175, 10, 213, 192, 213, 25, 54, 198, 32, 181, 223, 181, 52, 73, 113, 130, 0, 49, 161, 172, 143, 100, 17, 177, 215, 44, 79, 3, 48, 93, 94, 197, 4, 213, 102, 184, 161, 110, 249, 1, 4, 199, 17, 125, 95, 49, 97, 245, 105, 248, 83, 29, 87, 80, 121, 43, 34, 58, 250, 158, 168, 31, 103, 222, 56, 59, 10, 172, 236, 66, 162, 176, 204, 103, 207, 134, 50, 133, 169, 36, 117, 36, 211, 171, 61, 174, 179, 122, 178, 164, 244, 204, 33, 112, 117, 29, 187, 139, 115, 61, 8, 151, 246, 120, 0, 83, 195, 189, 159, 89, 95, 161, 130, 236, 210, 96, 133, 31, 226, 246, 45, 86, 35, 201, 167, 198, 25, 99, 127, 77, 214, 121, 227, 135, 122, 241, 118, 48, 91, 27, 80, 224, 6, 77, 49, 94, 164, 12, 252, 59, 249, 81, 186, 103, 55, 218, 253, 190, 143, 148, 232, 82, 207, 205, 30, 74, 252, 248, 229, 131, 120, 27, 42, 162, 230, 93, 117, 83, 201, 119, 216, 3, 208, 114, 90, 240, 16, 64, 145, 174, 209, 62, 210, 94, 47, 95, 219, 226, 100, 92, 243, 237, 206, 12, 183, 108, 209, 141, 187, 35, 74, 91, 109, 181, 220, 81, 39, 163, 235, 165, 57, 23, 99, 253, 118, 52, 187, 163, 81, 25, 227, 148, 228, 67, 120, 250, 162, 56, 129, 195, 4, 69, 134, 144, 12, 252, 166, 208, 13, 132, 183, 138, 84, 190, 13, 55, 203, 16, 55, 223, 252, 192, 128, 177, 240, 73, 104, 13, 52, 89, 219, 134, 52, 192, 180, 81, 196, 98, 43, 59, 78, 124, 45, 141, 242, 86, 183, 115, 41, 2, 3, 1, 0, 1]),
            "pkcs8": new Uint8Array([48, 130, 9, 67, 2, 1, 0, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 4, 130, 9, 45, 48, 130, 9, 41, 2, 1, 0, 2, 130, 2, 1, 0, 189, 172, 126, 45, 110, 212, 151, 116, 205, 142, 202, 154, 100, 42, 228, 84, 155, 198, 40, 102, 164, 171, 252, 118, 80, 116, 229, 224, 41, 250, 94, 141, 130, 50, 219, 55, 76, 19, 12, 40, 242, 43, 91, 56, 38, 58, 31, 70, 114, 199, 129, 108, 248, 81, 169, 118, 132, 191, 228, 191, 8, 38, 44, 78, 246, 111, 141, 178, 245, 67, 57, 198, 253, 46, 255, 25, 246, 244, 172, 73, 50, 209, 95, 207, 182, 113, 180, 80, 154, 213, 182, 120, 51, 253, 1, 234, 88, 119, 103, 163, 104, 43, 124, 133, 99, 136, 95, 201, 174, 234, 212, 195, 195, 142, 250, 135, 144, 89, 218, 216, 88, 65, 53, 220, 203, 104, 155, 83, 48, 106, 29, 71, 25, 135, 221, 210, 92, 127, 153, 71, 63, 6, 161, 213, 197, 105, 173, 127, 0, 76, 29, 226, 229, 31, 178, 55, 206, 86, 204, 135, 67, 4, 144, 62, 239, 118, 112, 60, 11, 59, 117, 46, 159, 64, 176, 64, 175, 203, 242, 10, 119, 1, 19, 108, 36, 49, 147, 7, 243, 156, 8, 224, 20, 229, 51, 187, 196, 213, 119, 8, 16, 51, 216, 104, 245, 28, 225, 136, 225, 12, 117, 12, 0, 201, 111, 20, 153, 120, 31, 213, 47, 120, 112, 175, 10, 213, 192, 213, 25, 54, 198, 32, 181, 223, 181, 52, 73, 113, 130, 0, 49, 161, 172, 143, 100, 17, 177, 215, 44, 79, 3, 48, 93, 94, 197, 4, 213, 102, 184, 161, 110, 249, 1, 4, 199, 17, 125, 95, 49, 97, 245, 105, 248, 83, 29, 87, 80, 121, 43, 34, 58, 250, 158, 168, 31, 103, 222, 56, 59, 10, 172, 236, 66, 162, 176, 204, 103, 207, 134, 50, 133, 169, 36, 117, 36, 211, 171, 61, 174, 179, 122, 178, 164, 244, 204, 33, 112, 117, 29, 187, 139, 115, 61, 8, 151, 246, 120, 0, 83, 195, 189, 159, 89, 95, 161, 130, 236, 210, 96, 133, 31, 226, 246, 45, 86, 35, 201, 167, 198, 25, 99, 127, 77, 214, 121, 227, 135, 122, 241, 118, 48, 91, 27, 80, 224, 6, 77, 49, 94, 164, 12, 252, 59, 249, 81, 186, 103, 55, 218, 253, 190, 143, 148, 232, 82, 207, 205, 30, 74, 252, 248, 229, 131, 120, 27, 42, 162, 230, 93, 117, 83, 201, 119, 216, 3, 208, 114, 90, 240, 16, 64, 145, 174, 209, 62, 210, 94, 47, 95, 219, 226, 100, 92, 243, 237, 206, 12, 183, 108, 209, 141, 187, 35, 74, 91, 109, 181, 220, 81, 39, 163, 235, 165, 57, 23, 99, 253, 118, 52, 187, 163, 81, 25, 227, 148, 228, 67, 120, 250, 162, 56, 129, 195, 4, 69, 134, 144, 12, 252, 166, 208, 13, 132, 183, 138, 84, 190, 13, 55, 203, 16, 55, 223, 252, 192, 128, 177, 240, 73, 104, 13, 52, 89, 219, 134, 52, 192, 180, 81, 196, 98, 43, 59, 78, 124, 45, 141, 242, 86, 183, 115, 41, 2, 3, 1, 0, 1, 2, 130, 2, 0, 105, 193, 76, 149, 14, 111, 176, 134, 234, 186, 12, 19, 43, 120, 146, 216, 238, 5, 253, 174, 197, 112, 51, 146, 208, 103, 109, 104, 160, 95, 61, 235, 14, 198, 70, 94, 61, 167, 125, 39, 51, 103, 163, 51, 218, 116, 155, 205, 142, 223, 216, 53, 38, 251, 121, 78, 96, 212, 17, 185, 197, 212, 106, 238, 24, 15, 184, 229, 40, 69, 52, 104, 211, 240, 41, 66, 147, 228, 118, 79, 85, 235, 81, 205, 161, 191, 34, 55, 179, 45, 39, 209, 59, 195, 125, 22, 233, 254, 161, 165, 133, 198, 129, 102, 106, 73, 182, 134, 224, 101, 132, 254, 38, 2, 137, 131, 158, 163, 203, 22, 199, 150, 140, 110, 176, 103, 129, 251, 79, 74, 75, 74, 194, 92, 115, 252, 255, 160, 17, 153, 156, 245, 152, 180, 117, 158, 231, 162, 161, 74, 207, 123, 28, 31, 161, 33, 230, 133, 149, 2, 114, 6, 144, 90, 214, 239, 165, 194, 132, 204, 193, 24, 158, 168, 213, 221, 43, 103, 190, 107, 193, 80, 179, 64, 159, 169, 152, 126, 93, 129, 9, 157, 207, 104, 192, 128, 152, 78, 33, 81, 56, 159, 127, 177, 125, 193, 125, 170, 241, 56, 29, 230, 244, 101, 91, 239, 19, 102, 219, 240, 228, 199, 245, 164, 83, 153, 61, 44, 84, 35, 171, 50, 191, 213, 156, 214, 43, 129, 3, 104, 18, 68, 63, 207, 175, 143, 2, 38, 164, 72, 229, 209, 72, 174, 55, 144, 243, 102, 127, 11, 50, 211, 228, 18, 55, 206, 8, 252, 12, 202, 228, 155, 250, 88, 56, 11, 58, 195, 83, 12, 157, 53, 221, 104, 64, 156, 19, 43, 80, 50, 21, 42, 69, 168, 153, 130, 39, 195, 14, 224, 132, 157, 221, 245, 140, 50, 84, 162, 157, 16, 249, 129, 241, 56, 155, 239, 16, 69, 85, 137, 106, 192, 59, 57, 244, 223, 170, 21, 66, 178, 70, 98, 11, 251, 61, 214, 88, 29, 250, 110, 47, 204, 68, 193, 218, 242, 19, 208, 37, 146, 133, 29, 8, 135, 172, 221, 94, 181, 200, 119, 237, 253, 11, 87, 74, 83, 28, 108, 127, 127, 212, 105, 187, 28, 180, 150, 57, 72, 39, 62, 82, 67, 117, 164, 194, 180, 2, 25, 114, 170, 90, 9, 38, 242, 65, 108, 23, 234, 26, 153, 247, 104, 222, 164, 185, 51, 129, 115, 166, 75, 82, 135, 53, 246, 124, 42, 154, 65, 133, 192, 214, 107, 51, 167, 42, 196, 201, 90, 73, 147, 110, 42, 163, 87, 234, 186, 17, 234, 111, 68, 241, 129, 233, 229, 116, 121, 48, 60, 182, 29, 101, 101, 39, 252, 61, 47, 141, 84, 115, 207, 153, 194, 118, 115, 45, 203, 85, 156, 68, 81, 3, 144, 176, 251, 92, 175, 58, 24, 75, 184, 31, 63, 59, 91, 125, 67, 163, 224, 42, 144, 60, 243, 111, 65, 251, 21, 3, 149, 11, 171, 6, 219, 232, 180, 220, 105, 202, 48, 173, 33, 143, 181, 2, 130, 1, 1, 0, 252, 57, 152, 68, 4, 229, 40, 184, 16, 93, 181, 214, 250, 196, 183, 211, 122, 159, 160, 14, 205, 244, 206, 109, 13, 197, 226, 130, 59, 117, 27, 54, 68, 157, 55, 115, 217, 163, 204, 71, 104, 112, 41, 242, 239, 143, 135, 135, 133, 139, 113, 223, 30, 70, 111, 100, 88, 4, 44, 56, 0, 127, 202, 185, 243, 145, 95, 113, 250, 63, 146, 110, 187, 238, 170, 214, 192, 143, 0, 203, 96, 111, 43, 60, 172, 17, 204, 20, 128, 32, 90, 67, 101, 51, 216, 158, 155, 49, 91, 135, 238, 111, 3, 238, 10, 41, 218, 128, 211, 207, 96, 66, 202, 129, 171, 222, 100, 32, 189, 37, 202, 168, 120, 226, 128, 175, 47, 115, 210, 211, 251, 209, 243, 201, 77, 47, 198, 235, 26, 55, 66, 213, 151, 59, 55, 41, 175, 207, 24, 192, 73, 236, 152, 169, 127, 159, 190, 30, 168, 124, 218, 190, 182, 4, 50, 199, 241, 222, 134, 10, 136, 11, 209, 24, 35, 107, 41, 46, 48, 71, 116, 66, 231, 53, 208, 80, 63, 75, 113, 159, 141, 87, 3, 244, 177, 237, 26, 43, 30, 38, 246, 30, 176, 234, 226, 72, 201, 89, 54, 170, 75, 0, 20, 139, 238, 92, 255, 222, 251, 172, 185, 246, 175, 89, 245, 174, 115, 210, 21, 167, 66, 249, 154, 89, 220, 99, 218, 227, 20, 146, 20, 193, 196, 66, 153, 21, 197, 44, 232, 101, 192, 197, 13, 153, 103, 211, 2, 130, 1, 1, 0, 192, 131, 59, 97, 170, 245, 55, 85, 61, 154, 207, 231, 72, 180, 35, 203, 21, 135, 179, 66, 144, 48, 67, 246, 172, 25, 102, 160, 133, 52, 199, 123, 78, 218, 53, 52, 17, 203, 134, 85, 186, 50, 9, 0, 71, 55, 254, 69, 116, 3, 213, 153, 138, 148, 55, 124, 54, 46, 95, 121, 123, 149, 206, 224, 198, 166, 14, 149, 246, 189, 123, 135, 109, 222, 227, 82, 231, 73, 4, 105, 175, 152, 184, 201, 204, 167, 159, 124, 94, 176, 203, 202, 88, 124, 39, 240, 2, 16, 171, 87, 193, 46, 146, 7, 220, 188, 136, 164, 31, 158, 45, 223, 40, 203, 178, 100, 239, 67, 113, 65, 243, 97, 116, 210, 154, 10, 46, 2, 104, 87, 50, 43, 238, 237, 177, 13, 68, 121, 155, 231, 53, 245, 136, 52, 50, 229, 150, 75, 218, 93, 218, 225, 229, 183, 206, 44, 228, 13, 225, 25, 129, 107, 233, 214, 151, 132, 135, 37, 121, 71, 85, 2, 89, 20, 110, 8, 50, 222, 12, 32, 178, 53, 26, 100, 11, 79, 182, 27, 129, 77, 243, 78, 131, 47, 153, 116, 227, 37, 228, 200, 15, 59, 98, 94, 138, 122, 133, 52, 175, 147, 218, 201, 238, 115, 72, 47, 214, 202, 240, 180, 173, 82, 252, 209, 216, 238, 134, 195, 67, 149, 32, 41, 212, 142, 7, 137, 211, 163, 216, 155, 110, 20, 29, 173, 238, 186, 2, 169, 166, 144, 199, 204, 215, 83, 183, 147, 2, 130, 1, 1, 0, 203, 31, 235, 19, 100, 73, 212, 248, 31, 30, 8, 242, 127, 243, 235, 3, 34, 46, 233, 108, 226, 202, 179, 111, 185, 246, 210, 139, 5, 45, 51, 100, 9, 239, 255, 23, 138, 127, 210, 100, 243, 163, 216, 244, 175, 159, 12, 139, 196, 173, 223, 95, 203, 118, 248, 0, 124, 173, 167, 154, 214, 52, 20, 100, 154, 214, 73, 98, 118, 33, 186, 96, 249, 114, 165, 28, 219, 232, 142, 192, 59, 2, 108, 116, 169, 50, 144, 3, 54, 136, 87, 137, 13, 56, 170, 204, 88, 185, 112, 56, 81, 122, 16, 85, 36, 212, 62, 7, 32, 13, 83, 61, 150, 238, 197, 38, 13, 199, 27, 237, 18, 127, 137, 19, 8, 133, 141, 22, 159, 4, 95, 57, 223, 54, 15, 182, 89, 97, 63, 52, 159, 219, 121, 182, 147, 159, 59, 217, 241, 217, 241, 238, 219, 167, 45, 131, 205, 77, 205, 108, 247, 145, 60, 238, 182, 162, 181, 147, 250, 169, 2, 149, 89, 168, 49, 229, 252, 61, 25, 94, 130, 47, 219, 26, 72, 144, 71, 217, 15, 65, 106, 71, 88, 133, 56, 193, 117, 32, 162, 96, 200, 55, 65, 77, 120, 61, 28, 2, 127, 246, 182, 253, 242, 142, 26, 193, 196, 194, 164, 54, 159, 113, 30, 24, 185, 181, 235, 202, 149, 235, 165, 17, 117, 15, 199, 96, 151, 135, 231, 42, 26, 19, 78, 102, 63, 248, 251, 89, 70, 51, 164, 2, 78, 8, 108, 71, 2, 130, 1, 0, 55, 87, 130, 130, 153, 58, 213, 37, 84, 8, 101, 43, 255, 226, 137, 71, 160, 112, 218, 63, 144, 99, 207, 165, 225, 227, 139, 117, 41, 213, 250, 98, 160, 80, 106, 107, 5, 146, 148, 147, 160, 107, 49, 219, 58, 158, 6, 34, 193, 47, 57, 0, 98, 174, 41, 37, 52, 14, 48, 180, 35, 170, 245, 69, 248, 213, 83, 236, 24, 122, 112, 64, 134, 125, 68, 172, 88, 128, 205, 27, 244, 182, 218, 168, 104, 132, 231, 124, 65, 92, 97, 185, 81, 166, 159, 116, 135, 163, 115, 30, 79, 18, 172, 56, 70, 100, 140, 131, 97, 243, 127, 12, 96, 21, 238, 186, 197, 109, 133, 233, 135, 165, 196, 135, 166, 112, 182, 185, 74, 117, 134, 158, 202, 152, 218, 5, 14, 98, 71, 71, 56, 99, 213, 59, 236, 69, 195, 231, 26, 103, 80, 189, 15, 228, 191, 8, 120, 166, 228, 199, 8, 69, 149, 123, 115, 35, 78, 22, 159, 190, 185, 217, 106, 242, 76, 143, 94, 208, 38, 124, 95, 190, 148, 79, 158, 80, 211, 241, 36, 66, 220, 102, 253, 159, 121, 101, 248, 198, 179, 246, 47, 42, 203, 36, 146, 122, 150, 64, 135, 24, 226, 20, 154, 207, 217, 56, 167, 110, 191, 179, 176, 255, 226, 94, 17, 22, 192, 246, 241, 62, 181, 120, 80, 250, 99, 128, 99, 174, 254, 93, 240, 79, 40, 25, 16, 63, 184, 244, 60, 69, 242, 170, 24, 92, 160, 177, 2, 130, 1, 1, 0, 169, 186, 241, 45, 204, 118, 110, 146, 100, 135, 229, 21, 161, 146, 193, 51, 100, 5, 124, 98, 128, 235, 207, 59, 131, 236, 8, 139, 105, 110, 37, 245, 48, 61, 147, 224, 92, 69, 17, 195, 73, 226, 126, 71, 40, 250, 2, 138, 77, 242, 236, 197, 139, 19, 117, 47, 3, 41, 9, 47, 3, 206, 196, 149, 8, 65, 173, 26, 248, 201, 131, 235, 0, 67, 249, 94, 28, 73, 1, 196, 56, 219, 195, 178, 152, 191, 38, 59, 191, 166, 228, 63, 255, 231, 135, 28, 31, 169, 101, 155, 64, 42, 207, 203, 15, 174, 95, 188, 90, 6, 165, 32, 84, 84, 135, 11, 130, 5, 192, 141, 52, 159, 97, 44, 131, 157, 113, 126, 233, 68, 69, 113, 168, 52, 196, 141, 239, 13, 66, 94, 250, 54, 63, 111, 226, 96, 254, 186, 252, 151, 158, 173, 226, 0, 5, 200, 70, 107, 207, 85, 238, 128, 201, 61, 83, 114, 117, 19, 34, 37, 103, 137, 11, 15, 141, 247, 35, 167, 57, 112, 248, 49, 240, 208, 10, 197, 32, 244, 177, 222, 22, 211, 188, 245, 133, 246, 250, 25, 120, 205, 194, 83, 15, 0, 94, 96, 179, 69, 247, 69, 91, 247, 10, 95, 56, 197, 215, 244, 228, 231, 45, 65, 29, 50, 72, 117, 160, 230, 92, 112, 94, 113, 163, 149, 244, 126, 37, 113, 169, 85, 213, 26, 124, 131, 248, 173, 22, 69, 35, 178, 152, 102, 40, 59, 196, 219]),
            "jwk": {
                kty: "RSA",
                n: "773801594315700982558079628774583697888794639177781657302460386338552960805473478554883334678517406489799777601264569401967976509250400811819931382434011981797718015876655937044091844663567640759445914772474548327302353456584077919932451438019095604670646936882827908555254122340077364325455320007739899005417752915343255863553935856126559433600018074078685662700394595959832926516365060405290220842280563817818742924847593426422070732107503586775372119699297068226330218806264399404822105387679722057439237248308191469036026023917547649442243987340303904927965946860264174982536963850597648842200943200086680369467149250283708762091674830170657658832446800493565625891791934372960582084328604717209401801559458708509994583860626859432291756264354956434310879722723670119144762696010388940183023427522675432410837274717106836924520591233422488335233757384206367783755865359546003951862688229279377660782303762624627684471191514785277846598279869362113478048641294266231577364774580143236123649982790482167950249434932696237734228148035878973912415396676973807744833908549065667334401564433813453131375673251243989322205834073262995163935284528320799690917218717251562422457217282091029721773285981523931752481430687627830959627793193",
                e: "65537",
                d: "431443063580725843472462696111388420351167201888937844873723316251843443257897163127302011573427293750763289032574097540584888377931838443393992899362516316384186246214335178533166914809213500175334744826601652050413587708577426358732497795087595899877475467608151343615324791864576757706585025991467776211254254989998900048981863224113410871159471145229553577379726245189255763428818769126900986615160506011366322614963393371605183127423292011601978617054976794330810573041178378910410982391186729995283384474273000358119007994567513140031875696803363672276314199066495463906448009461291921911940806955984671061853564387081010143527112256768568271362447898712022967931413627800066774946580345980209849559555610887860691190936536638426544470148218617834548217764321352857110156533688270035041589579221230156599087113296309830859380312650451068783195025055806862736518622811298749521937229850285853619634473978956196403360965588001355080015476198357850139498636336267206536615286133229618024931429542605997583122610121596344553697332733912705420434629076137302482340291940772729326571148561193251833089348364900983057070935798880550015769075379070626276864975258430326204111200447289696128328218097405994851493296295302734981525245877"
            }
        }
    };

    // combinations to test
    var testVectors = [
        //{name: "RSA-OAEP", privateUsages: ["decrypt", "unWrapKey"], publicUsages: ["encrypt", "wrapKey"]},
        {name: "RSA-PSS",  privateUsages: ["sign"], publicUsages: ["verify"]},
        //{name: "RSASSA-PKCS1-v1_5",  privateUsages: ["sign"], publicUsages: ["verify"]}
    ];

    // TESTS ARE HERE:
    // Test every test vector, along with all available key data
    testVectors.forEach(function(vector) {
        sizes.forEach(function(size) {

            // Test public keys first
            allValidUsages(vector.publicUsages, []).forEach(function(usages) {
                hashes.forEach(function(hash) {
                    [true, false].forEach(function(extractable) {
                        ['spki', 'jwk'].forEach(function(format) {
                            var algorithm = {name: vector.name, hash: hash};
                            testFormat(format, algorithm, keyData[size], size, usages, extractable);
                        });
                    });
                });
            });

        });
    });


    // Test importKey with a given key format and other parameters. If
    // extrable is true, export the key and verify that it matches the input.
    function testFormat(format, algorithm, keyData, keySize, usages, extractable) {
        promise_test(function(test) {
            return subtle.importKey(format, keyData[format], algorithm, extractable, usages).
            then(function(key) {
                assert_equals(key.constructor, CryptoKey, "Imported a CryptoKey object");
                if (!extractable) {
                    return;
                }

                return subtle.exportKey(format, key).
                then(function(result) {
                    if (format !== "jwk") {
                        assert_true(equalBuffers(keyData, result), "Round trip works");
                    } else {
                        assert_true(equalJwk(keyData, result), "Round trip works");
                    }
                }, function(err) {
                    assert_unreached("Threw an unexpected error: " + err.toString());
                });
            }, function(err) {
                assert_unreached("Threw an unexpected error: " + err.toString());
            });
        }, "Good parameters: " + keySize.toString() + " bits " + parameterString(format, keyData[format], algorithm, extractable, usages));
    }



    // Helper methods follow:

    // Are two array buffers the same?
    function equalBuffers(a, b) {
        if (a.byteLength !== b.byteLength) {
            return false;
        }

        var aBytes = new Uint8Array(a);
        var bBytes = new Uint8Array(b);

        for (var i=0; i<a.byteLength; i++) {
            if (aBytes[i] !== bBytes[i]) {
                return false;
            }
        }

        return true;
    }

    // Are two Jwk objects "the same"? That is, does the object returned include
    // matching values for each property that was expected? It's okay if the
    // returned object has extra methods; they aren't checked.
    function equalJwk(expected, got) {
        var fields = Object.keys(expected);
        var fieldName;

        for(var i=0; i<fields.length; i++) {
            fieldName = fields[i];
            if (!(fieldName in got)) {
                return false;
            }
            if (expected[fieldName] !== got[fieldName]) {
                return false;
            }
        }

        return true;
    }

    // Build minimal Jwk objects from raw key data and algorithm specifications
    function jwkData(keyData, algorithm) {
        var result = {
            kty: "oct",
            k: byteArrayToUnpaddedBase64(keyData)
        };

        if (algorithm.name.substring(0, 3) === "AES") {
            result.alg = "A" + (8 * keyData.byteLength).toString() + algorithm.name.substring(4);
        } else if (algorithm.name === "HMAC") {
            result.alg = "HS" + algorithm.hash.substring(4);
        }
        return result;
    }

    // Jwk format wants Base 64 without the typical padding at the end.
    function byteArrayToUnpaddedBase64(byteArray){
        var binaryString = "";
        for (var i=0; i<byteArray.byteLength; i++){
            binaryString += String.fromCharCode(byteArray[i]);
        }
        var base64String = btoa(binaryString);

        return base64String.replace(/=/g, "");
    }

    // Want to test every valid combination of usages. Start by creating a list
    // of all non-empty subsets to possible usages.
    function allNonemptySubsetsOf(arr) {
        var results = [];
        var firstElement;
        var remainingElements;

        for(var i=0; i<arr.length; i++) {
            firstElement = arr[i];
            remainingElements = arr.slice(i+1);
            results.push([firstElement]);

            if (remainingElements.length > 0) {
                allNonemptySubsetsOf(remainingElements).forEach(function(combination) {
                    combination.push(firstElement);
                    results.push(combination);
                });
            }
        }

        return results;
    }

    // Return a list of all valid usage combinations, given the possible ones
    // and the ones that are required for a particular operation.
    function allValidUsages(possibleUsages, requiredUsages) {
        var allUsages = [];

        allNonemptySubsetsOf(possibleUsages).forEach(function(usage) {
            for (var i=0; i<requiredUsages.length; i++) {
                if (!usage.includes(requiredUsages[i])) {
                    return;
                }
            }
            allUsages.push(usage);
        });

        return allUsages;
    }

    // Convert method parameters to a string to uniquely name each test
    function parameterString(format, data, algorithm, extractable, usages) {
        if ("byteLength" in data) {
            data = "buffer(" + data.byteLength.toString() + ")";
        }
        var result = "(" +
                        objectToString(format) + ", " +
                        objectToString(data) + ", " +
                        objectToString(algorithm) + ", " +
                        objectToString(extractable) + ", " +
                        objectToString(usages) +
                     ")";

        return result;
    }

    // Character representation of any object we may use as a parameter.
    function objectToString(obj) {
        var keyValuePairs = [];

        if (Array.isArray(obj)) {
            return "[" + obj.map(function(elem){return objectToString(elem);}).join(", ") + "]";
        } else if (typeof obj === "object") {
            Object.keys(obj).sort().forEach(function(keyName) {
                keyValuePairs.push(keyName + ": " + objectToString(obj[keyName]));
            });
            return "{" + keyValuePairs.join(", ") + "}";
        } else if (typeof obj === "undefined") {
            return "undefined";
        } else {
            return obj.toString();
        }

        var keyValuePairs = [];

        Object.keys(obj).sort().forEach(function(keyName) {
            var value = obj[keyName];
            if (typeof value === "object") {
                value = objectToString(value);
            } else if (typeof value === "array") {
                value = "[" + value.map(function(elem){return objectToString(elem);}).join(", ") + "]";
            } else {
                value = value.toString();
            }

            keyValuePairs.push(keyName + ": " + value);
        });

        return "{" + keyValuePairs.join(", ") + "}";
    }

    return; // from run_test
}
