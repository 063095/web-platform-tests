/*global phantom*/

var page = require("webpage").create()
,   system = require("system")
,   url
;

if (system.args.length === 1) {
    console.log("[ERROR] URL argument required.");
    phantom.exit();
}
else {
    url = system.args[1];
}

page.open(url, function (status) {
    if (status !== "success") {
        console.log("[ERROR] Failed to load page");
        phantom.exit();
    }
    
    page.includeJs("https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js", function () {
        var toc = page.evaluate(function () {
            var tocList = [];
            function walkToC ($, $el, list, level) {
                level++;
                $el.find("> li").each(function () {
                    var $li = $(this)
                    ,   $a = $li.find("> a").first()
                    ;
                    var href = $a.attr("href").replace(/^.*#/, "")
                    ,   def = {
                            id: href.toLowerCase()
                                    .replace(/[^a-z0-9\-]/g, "-")
                                    .replace(/\-{2,}/g, "-")
                                    .replace(/(?:^\-|\-$)/g, "")
                        ,   original_id: href
                        ,   level:  level
                        }
                    ,   $ol = $li.find("> ol").first()
                    ;
                    list.push(def);
                    if ($ol.length && level < 3) {
                        walkToC($, $ol, list, level);
                    }
                });
            }
            
            var $toc = $("body > ol.toc").first()
            ;
            walkToC($, $toc, tocList, 0);
            // get ID ranges for the ToC
            for (var i = 0, n = tocList.length; i < n; i++) {
                var section = tocList[i]
                ,   level = section.level
                ;
                section.end_id = null;
                for (var j = i + 1, m = tocList.length; j < m; j++) {
                    var next = tocList[j];
                    if (next.level === level || next.level < level) {
                        section.end_id = next.original_id;
                        break;
                    }
                }
            }
            
            // extract ranges
            // do the analysis
            
            return tocList;
        });
        console.log(JSON.stringify(toc));
        phantom.exit();
    });
    
});


// var nodes = []
// ,   doc = window.document
// ,   start = doc.getElementById(section.original_id)
// ;
// console.log(start);
// if (section.end_id) {
//     var end = doc.getElementById(section.end_id);
//     var nxt = start;
//     console.log("Start '%s' (%s) and end at '%s' (%s)", start.innerHTML, section.original_id, end.innerHTML, section.end_id);
//     while (nxt = start.nextSibling) {
//         // compareDocumentPosition -- because bitmasks are just so cool
//         if (nxt.compareDocumentPosition(end) & nxt.DOCUMENT_POSITION_FOLLOWING) {
//             // console.log("Adding node...");
//             nodes.push(nxt);
//         }
//         else {
//             break;
//         }
//     }
// }
// else {
//     console.log("Start '%s' and end at EOF", $(start).text());
//     var nxt = start;
//     while (nxt = start.nextSibling) nodes.push(nxt);
// }
// ranges[spec][section.id] = $(nodes);
// console.log("OK with %d", nodes.length);
// // console.log(nodes);
