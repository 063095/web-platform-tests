<!doctype html>
<html lang='en-us'>
<head>
<title>HTML5 Conformance Test Results</title>
<script>
var g_arrTestResultXml = new Array();
var g_arrBrowsers = new Array();
var g_iProcessedCounter = 0;

notWhitespace = /\S/;

function cleanWhitespace(node)
{
    for (var x = 0; x < node.childNodes.length; x++)
    {
        var childNode = node.childNodes[x];
        
        if ((childNode.nodeType == 3)&&(!notWhitespace.test(childNode.nodeValue))) 
        {
            // that is, if it's a whitespace text node
            node.removeChild(node.childNodes[x]);
            x--;
        }
        if (childNode.nodeType == 1)
        {
            // elements can have text child nodes of their own
            cleanWhitespace(childNode);
        }
    }
}

function addBrowserResult(browser)
{
    oTable = document.getElementById('oTestResults');

    // create a new Cell in the first row...
    oCell = oTable.rows[0].insertCell(-1);
    oCell.innerHTML = browser.name;
    
    bFound = false;
    
    // for each result - if a feature exists add result, else add new row and add result
    for (var k=0;k<browser.results.length;k++)
    {
        for (var j=1;j<oTable.rows.length;j++)
        {
             if ( browser.results[k].name == oTable.rows[j].cells[0].innerHTML)
             {
                 if ( oTable.rows[0].cells.length > oTable.rows[j].cells.length)
                 {
                     oCell = oTable.rows[j].insertCell(-1);
                 }
                 oCell.innerHTML = Math.round(((browser.results[k].pass/(browser.results[k].fail+browser.results[k].pass))*100)*100)/100 + "%";
                 bFound = true;
                 break;
             }
             if (!bFound && oTable.rows[0].cells.length > oTable.rows[j].cells.length)
             {
                 oCell = oTable.rows[j].insertCell(-1);
                 oCell.innerHTML = 'No Results';
             }
        }
        if(!bFound)
        {
            oRow = oTable.insertRow(-1);
            var oCell;
            
            for( var i=0;i<oTable.rows[0].cells.length;i++)
            {
                oCell = oRow.insertCell(-1);
                if (i!=0)
                {
                    oCell.innerHTML = 'No Results';
                }
                else
                {
                    oCell.innerHTML = browser.results[k].name;
                }
            }
            oCell.innerHTML = Math.round(((browser.results[k].pass/(browser.results[k].fail+browser.results[k].pass))*100)*100)/100 + "%";
        }
        
        bFound = false;
    }
    
}

function addBrowserDetails(browser)
{
    oTable = document.getElementById('oTestDetails');

    // create a new Cell in the first row...
    var oCell = oTable.rows[0].insertCell(-1);
    oCell.innerHTML = browser.name + '<br>(' + browser.dateran + ')';
    
    bFound = false;
    
    // for each result - if a tests exists add result, else add new row and add result
    for (var k=0;k<browser.details.length;k++)
    {
        for (var j=1;j<oTable.rows.length;j++)
        {
             if ( browser.details[k].name == oTable.rows[j].cells[0].innerHTML)
             {
                 if ( oTable.rows[0].cells.length > oTable.rows[j].cells.length)
                 {
                     oCell = oTable.rows[j].insertCell(-1);
                 }
                 oCell.innerHTML = "<a href='"+ browser.details[k].uri + "'>" + browser.details[k].result + "</a>";
                 bFound = true;
                 break;
             }
             if (!bFound && oTable.rows[0].cells.length > oTable.rows[j].cells.length)
             {
                 oCell = oTable.rows[j].insertCell(-1);
                 oCell.innerHTML = 'No Result';
             }
        }
        if(!bFound)
        {
            oRow = oTable.insertRow(-1);
            
            for( var i=0;i<oTable.rows[0].cells.length;i++)
            {
                oCell = oRow.insertCell(-1);
                if (i!=0)
                {
                    oCell.innerHTML = 'No Result';
                }
                else
                {
                    oCell.innerHTML = browser.details[k].name;
                }
            }
            oCell.innerHTML = "<a href='"+ browser.details[k].uri + "'>" + browser.details[k].result + "</a>";
 
        } 
       
        bFound = false;
    }
    
}

function processXmlFile()
{  
    xmlhttp = new XMLHttpRequest();

    xmlhttp.onreadystatechange  = function()
    { 
        if(xmlhttp.readyState  == 4)
        {
           try
           {            
                xmlDom = xmlhttp.responseXML;
                
                cleanWhitespace(xmlDom);
                
                browser = new Object();
                browser.ua      = xmlDom.getElementsByTagName('ua')[0].firstChild.nodeValue;
                browser.name    = xmlDom.getElementsByTagName('browsername')[0].firstChild.nodeValue;
                browser.dateran = xmlDom.getElementsByTagName('dateran')[0].firstChild.nodeValue;
                browser.results = new Array();
                browser.details = new Array();
                
                oTests = xmlDom.getElementsByTagName('test');
                var oLastObject;
                
                for (var i=0;i<oTests.length;i++)
                {
                    // split and find feature name - e.g. 'canvas' in this uri
                    //"http://test.w3.org/html/tests/approved/canvas/canvastest.htm"
                    arrURI = xmlDom.getElementsByTagName('test')[i].firstChild.firstChild.nodeValue.split(/\//);
                    // the name is 2nd to the last
                    name = arrURI[arrURI.length-2];
                    
                    result = xmlDom.getElementsByTagName('test')[i].firstChild.nextSibling.firstChild.nodeValue;

                    details = new Object();
                    details.uri = xmlDom.getElementsByTagName('test')[i].firstChild.firstChild.nodeValue;

                    details.name = name + "(" + arrURI[arrURI.length-1] + ")";
                    details.result = result;

                    browser.details.push(details);

                    // if (oLastObject && oLastObject.name == feature)
                    // set pass/fail data 
                    // else find it in the array, if not found the add it to the array
                    // 
                    if ( oLastObject && name == oLastObject.name)
                    {
                        if (result == "Pass")
                        {
                            oLastObject.pass++;
                        }
                        else if (result == "Fail")
                        {
                            oLastObject.fail++;
                        }
                    }
                    else
                    {
                         bFound = false;
                         
                         for (var j=0;j<browser.results.length;j++)
                         {
                            if(browser.results[j].name == name)
                            {
                                if (result == "Pass")
                                {
                                    browser.results[j].pass++;
                                }
                                else if (result == "Fail")
                                {
                                    browser.results[j].fail++;
                                }
                                oLastObject = browser.results[j];
                                bFound = true;
                                break;
                            }
                         }
                         
                         if(!bFound)
                         {
                            newResult = new Object();
                            newResult.name = name;
                            newResult.pass = 0;
                            newResult.fail = 0;
                            
                            if (result == "Pass")
                            {
                                newResult.pass++;
                            }
                            else if (result == "Fail")
                            {
                                newResult.fail++;
                            }
                            browser.results.push(newResult);
                            oLastObject = browser.results[browser.results.length-1];
                         }                         

                    }
                }
                
                g_arrBrowsers.push(browser);
                
               addBrowserResult(browser);
               addBrowserDetails(browser);
            }catch(e){}

            // Need to process next xml file
            processXmlFile();
        }
    }; 

    if (g_iProcessedCounter<g_arrTestResultXml.length)
    {
        xmlhttp.open("GET", g_arrTestResultXml[g_iProcessedCounter++], true);
        xmlhttp.send(null);
    }
}

function processTestResults()
{
    items = document.getElementsByTagName('iframe')[0].contentDocument.getElementsByTagName('a');

    for (var i = 0;i<items.length;i++)
    {
        if(items[i].href.match(/.xml/))
        {
            g_arrTestResultXml.push(items[i].href);
        }
    }
    // Create Table - just table with one row, feature + row for each xml file
    // Feature  Browser
    //
    oTable = document.getElementById('oTestResults');
    oTable.setAttribute("bgColor","#eeeeee"); 
    oTable.setAttribute("style", "font-family: Helvetica Neue,Helvetica,Arial,Verdana,Geneva,sans-serif; color: #47587c;");
    
    oTable.setAttribute("cellpadding", "5");
    oTable.setAttribute("border", "1");

    // insert header row and add one cell for the 'FEATURE'
    oRow = oTable.insertRow(-1);
    oCell = oRow.insertCell(-1);
    
    oCell.innerHTML = "Feature";
    oCell.setAttribute("bgColor","#1c6ca7");
    oCell.setAttribute("style","color: #FFFFFF;");

    oTable = document.getElementById('oTestDetails');
    oTable.setAttribute("bgColor","#eeeeee"); 
    oTable.setAttribute("style", "font-family: Helvetica Neue,Helvetica,Arial,Verdana,Geneva,sans-serif; color: #47587c; font-size: small;");
    
    oTable.setAttribute("cellpadding", "5");
    oTable.setAttribute("border", "1");

    // insert a row and a cell for Test
    oRow = oTable.insertRow(-1);
    oCell = oRow.insertCell(-1);
    
    oCell.innerHTML = "Test";
    oCell.setAttribute("bgColor","#1c6ca7");
    oCell.setAttribute("style","color: #FFFFFF;");


    processXmlFile();
}

function getTestResultXmlFiles()
{
    oIframe = document.createElement('iframe');
    
    document.body.appendChild(oIframe);

    if(window.addEventListener)
    {
        oIframe.onload = processTestResults;
    }
    else
    {
        oIframe.attachEvent('onload', processTestResults);
    }

    // points to location of xml files
    oIframe.src = 'http://test.w3.org/html/tests/reporting/';
}
</script>
<style>
BODY
{
	text-align: justify;
	color: #333;
	line-height: 1.3;
	font-family: "Gill Sans MT", "Gill Sans", GillSans, Arial, Helvetica, sans-serif;
	background-image: none;
	background-attachment: scroll;
	background-repeat: repeat;
	background-position-x: 0%;
	background-position-y: 0%;
	background-color: white;
}
H1
{
	text-align: left;
	line-height: 1;
	padding-top: 0px;
	padding-right: 0px;
	padding-bottom: 0.2em;
	padding-left: 0px;
	font-variant: small-caps;
	font-weight: normal;
	border-bottom-width: thin;
	border-bottom-style: solid;
	font-style: italic;
	border-bottom-style: none;
	color: #000;
}
IFRAME
{
        display: none;
}
</style>
</head>
<body onload='getTestResultXmlFiles()' >
<img alt="W3C" src="http://www.w3.org/Icons/w3c_home" />
<h1>Official HTML5 Test Suite Conformance Results</h1>
<blockquote>
  <p>&#8220;Interoperability is the ability of two or more systems or
  components to exchange information and to use the information that
  has been exchanged.&#8221;</p>
  <p style='text-align: right;'>-IEEE</p>
</blocquote>
<p>Interoperability is important to web designers. Good test suites
drive interoperability. They're a key part of making sure web
standards are implemented correctly and consistently. More tests
encourage more interoperability.</p>
<p>
  The Official HTML5 Test Suite Results aims to help implementers
   write applications that support HTML5. In no way are these
   conformance tests to be construed as providing certification or
   branding of HTML5 implementations. The only claim that could be
   made is that a particular implementation is conformant to a
   particular version of the HTML5 Test Suite.
</p>
<div style="border: 4px solid red; padding: 1ex; width: 80%; margin: auto;border-radius: 30px;">
 <p>
The HTML5 Test suite is still being developed.  The number of tests
   and the results on these tests will change.
</p>
<p>
The results in this document may be updated, replaced or obsoleted by
others documents at any time.
</p>
<p>
It is inappropriate to cite those results as other than work in
progress and unstable.
</p>
</div>
<p>
Below is a summary of the offical approved HTML5 tests that have been
agreed upon by the HTML WG as valid per the HTML5 specification.  The
tests can be run and inspected individually using our test runner,
see the <a href='http://test.w3.org/html/tests/harness/harness.htm'>test harness</a>.
If you have feedback about the tests please send email
to <a href='mailto:public-html-testsuite@w3.org'>public-html-testsuite@w3.org</a>
list.</p>
<center>
<table id='oTestResults'>
</table>

<p>This is the detailed results across the userAgents</p>
<table id='oTestDetails' >
</table>
</center>
</body>
</html>
